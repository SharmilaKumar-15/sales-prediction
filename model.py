# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gPYVUQcGXKOP6HUOVSVluRnPfnWl3_mf
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
# %matplotlib inline
def fuc(x,period,num):
    print(x+" "+period+" "+num)
    df=pd.read_csv(x)

    df.head()

    ## Change the Column Names 
    df.columns=["Month","Sales"]
    df.head()

    df.tail()

    """#### Here we can see that last 2 columns have null values. So we'll remove those"""

    ## Drop last 2 rows
    df.drop(106,axis=0,inplace=True)

    df.drop(105,axis=0,inplace=True)

    # Convert Month into Datetime
    df['Month']=pd.to_datetime(df['Month'])
    if(period=="Weekly"):
        print(x)
        s = pd.to_datetime(df['Month'])
        u = (df.assign(Weeks=[pd.date_range(*x,freq='W')
                    for x in zip(s,s.add(pd.offsets.MonthEnd()))]).explode("Weeks"))
        u[['Sales']] = u[['Sales']].div(u.groupby("Month")['Month'].transform("count"),axis=0)

        u.head()

        u.tail()



        df = u.tail(100)

        df = df.reset_index()

        print(df)

        df.drop('index', inplace=True, axis=1)

        df.drop('Month', inplace=True, axis=1)

        df.info()

        cols = df.columns.tolist()

        cols

        cols = cols[-1:] + cols[:-1]

        df = df[cols]

        df.head()

        df.describe()

        df.info()

        df.set_index('Weeks', inplace=True)

        # df.plot()

        from statsmodels.tsa.stattools import adfuller

        test_result=adfuller(df['Sales'])

        #HYPOTHESIS TEST:
        #Ho: It is non stationary
        #H1: It is stationary

        def adfuller_test(sales):
            
            result=adfuller(sales)
            
            labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations Used']
            
            for value,label in zip(result,labels):
                print(label+' : '+str(value) )
            
            if result[1] <= 0.05:
                print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data has no unit root and is stationary")
            else:
                print("weak evidence against null hypothesis, time series has a unit root, indicating it is non-stationary ")

        adfuller_test(df['Sales'])

        df['Seasonal First Difference']=df['Sales']-df['Sales'].shift(12)

        df.head(14)

        adfuller_test(df['Seasonal First Difference'].dropna())

        # df['Seasonal First Difference'].plot()

        from statsmodels.graphics.tsaplots import plot_acf,plot_pacf

        # import statsmodels.api as sm
        # fig = plt.figure(figsize=(12,8))
        # ax1 = fig.add_subplot(211)
        # fig = sm.graphics.tsa.plot_acf(df['Seasonal First Difference'].iloc[13:],lags=40,ax=ax1)
        # ax2 = fig.add_subplot(212)
        # fig = sm.graphics.tsa.plot_pacf(df['Seasonal First Difference'].iloc[13:],lags=40,ax=ax2)









        from statsmodels.graphics.tsaplots import plot_acf,plot_pacf

        # from pandas.plotting import autocorrelation_plot
        # autocorrelation_plot(df['Sales']) 
        # plt.show()

        #p=1, d=1, q=0 or 1
        # from statsmodels.tsa.arima_model import ARIMA

        # model=ARIMA(df['Sales'],order=(1,1,1))
        # model_fit=model.fit()

        # model_fit.summary()

        # df['forecast']=model_fit.predict(start=90,end=103,dynamic=True)
        # # df[['Sales','forecast']].plot(figsize=(12,8))

        import statsmodels.api as sm

        model=sm.tsa.statespace.SARIMAX(df['Sales'],order=(1, 1, 1),seasonal_order=(1,1,1,12))
        results=model.fit(disp=0)

        df['forecast']=results.predict(start=90,end=120,dynamic=True)
        # df[['Sales','forecast']].plot(figsize=(12,4))

        # period="weekly"
        # n=2
        # print(period)
        # if(period=='yearly'):
        #     n=n*12

        from pandas.tseries.offsets import DateOffset

        #Here USING FOR LOOP we are adding some additional data for prediction purpose:

        future_dates=[df.index[-1]+ DateOffset(weeks=x)for x in range(0,int(num))]

        future_datest_df=pd.DataFrame(index=future_dates[1:],columns=df.columns)

        future_datest_df.tail(30)

        future_df=pd.concat([df,future_datest_df])

        future_df['forecast'] = results.predict(start=90, end=120, dynamic=True)  
        future_df[['Sales', 'forecast']].plot(figsize=(12, 8))
        plt.xlabel('WEEKS', fontsize=20)
        plt.ylabel('Sales', fontsize=20)
        plt.show()

#******************************************************************************************


    if(period=="Monthly" or period=="Yearly"):

        df.head()

        df.set_index('Month',inplace=True)

        df.head()

        df.describe()

        from statsmodels.tsa.stattools import adfuller

        test_result=adfuller(df['Sales'])

        #HYPOTHESIS TEST:
        #Ho: It is non stationary
        #H1: It is stationary

        def adfuller_test(sales):
            
            result=adfuller(sales)
            
            labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations Used']
            
            for value,label in zip(result,labels):
                print(label+' : '+str(value) )
            
            if result[1] <= 0.05:
                print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data has no unit root and is stationary")
            else:
                print("weak evidence against null hypothesis, time series has a unit root, indicating it is non-stationary ")

        adfuller_test(df['Sales'])

        df['Seasonal First Difference']=df['Sales']-df['Sales'].shift(12)

        df.head(14)

        ## Again test dickey fuller test
        adfuller_test(df['Seasonal First Difference'].dropna())

        # df['Seasonal First Difference'].plot()

        from statsmodels.graphics.tsaplots import plot_acf,plot_pacf

        # from pandas.plotting import autocorrelation_plot
        # autocorrelation_plot(df['Sales'])
        # plt.show()

        # import statsmodels.api as sm
        # fig = plt.figure(figsize=(12,8))
        # ax1 = fig.add_subplot(211)
        # fig = sm.graphics.tsa.plot_acf(df['Seasonal First Difference'].iloc[13:],lags=40,ax=ax1)
        # ax2 = fig.add_subplot(212)
        # fig = sm.graphics.tsa.plot_pacf(df['Seasonal First Difference'].iloc[13:],lags=40,ax=ax2)

        # For non-seasonal data
        #p=1, d=1, q=0 or 1
        # from statsmodels.tsa.arima_model import ARIMA

        # model=ARIMA(df['Sales'],order=(1,1,1))
        # model_fit=model.fit()

        # model_fit.summary()

        # df['forecast']=model_fit.predict(start=90,end=103,dynamic=True)
        # df[['Sales','forecast']].plot(figsize=(12,8))

        """### SARIMA MODEL"""

        import statsmodels.api as sm

        model=sm.tsa.statespace.SARIMAX(df['Sales'],order=(1, 1, 1),seasonal_order=(1,1,1,12))
        results=model.fit(disp=0)

        df['forecast']=results.predict(start=90,end=103,dynamic=True)
        # df[['Sales','forecast']].plot(figsize=(12,8))

        from pandas.tseries.offsets import DateOffset



        #Here USING FOR LOOP we are adding some additional data for prediction purpose:
        if(period=="Yearly"):
        
            print(num+"is the numbber")
            number=int(num)*12
            print(number)
            future_dates=[df.index[-1]+ DateOffset(months=x)for x in range(0,int(number))]
        if(period=="Monthly"):
            future_dates=[df.index[-1]+ DateOffset(months=x)for x in range(0,int(num))]

        #Convert that list into DATAFRAME:

        future_datest_df=pd.DataFrame(index=future_dates[1:],columns=df.columns)

        future_datest_df.tail()

        #CONCATE THE ORIGINAL AND THE NEWLY CREATED DATASET FOR VISUALIZATION PURPOSE:
        future_df=pd.concat([df,future_datest_df])

        #PREDICT
        future_df['forecast'] = results.predict(start = 104, end = 120, dynamic= True)  
        future_df[['Sales', 'forecast']].plot(figsize=(12, 8))
        if(period=="Monthly"):
            plt.xlabel('MOnths', fontsize=20)
            plt.ylabel('Sales', fontsize=20)
            plt.show()
        if(period=="Yearly"):
            plt.xlabel('Year', fontsize=20)
            plt.ylabel('Sales', fontsize=20)
            plt.show()    